[project]
name = "project-name"  # Replace with your project name
version = "0.1.0"
description = "Project description"
authors = [
    {name = "Your Name", email = "your.email@domain.com"},
]
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}  # Add your preferred license
keywords = ["keyword1", "keyword2"]  # Add relevant keywords
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

# Core dependencies - adjust versions based on your needs
dependencies = [
    # Development tools
    "black>=24.0.0",
    "ruff>=0.8.0",
    "mypy>=1.0.0",
    "pytest>=8.0.0",
    "pre-commit>=3.0.0",
    
    # Documentation
    "sphinx>=7.0.0",
    "myst-parser>=3.0.0",
    
    # Common data science packages
    "numpy>=1.26.0",
    "pandas>=2.0.0",
    "polars>=1.0.0",
    
    # AWS tools (if needed)
    "boto3>=1.34.0",
    "s3fs>=2024.0.0",
    
    # Additional utilities
    "pyyaml>=6.0.0",
    "python-dotenv>=1.0.0",  # Added for environment management
    "rich>=13.0.0",          # Added for better console output
    "typer>=0.9.0",         # Added for CLI applications
]

[project.optional-dependencies]
dev = [
    "pytest-cov>=4.1.0",    # Added for coverage reports
    "pytest-mock>=3.12.0",  # Added for mocking in tests
    "debugpy>=1.8.0",       # Added for debugging
]

docs = [
    "sphinx-rtd-theme>=2.0.0",
    "sphinx-autodoc-typehints>=1.25.0",
]

[project.urls]
Homepage = "https://github.com/username/project"
Documentation = "https://project.readthedocs.io/"
Repository = "https://github.com/username/project.git"
Changelog = "https://github.com/username/project/blob/main/CHANGELOG.md"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]
exclude = ["tests*", "docs*"]

[build-system]
requires = ["setuptools>=68.0.0", "wheel>=0.40.0"]
build-backend = "setuptools.build_meta"

[tool.black]
line-length = 88
target-version = ['py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
^/foo.py  # exclude a file named foo.py in the root of the project
'''

[tool.ruff]
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "PT",  # pytest
    "RUF", # ruff-specific rules
]
ignore = ["E402"]
line-length = 88
target-version = "py311"
extend-exclude = [
    "docs/*",
    "build/*",
    "dist/*",
    "*.pyc",
    "*.egg-info",
]

[tool.ruff.lint]
fixable = ["ALL"]
unfixable = []
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = true
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
show_error_codes = true
pretty = true

[tool.pytest.ini_options]
addopts = [
    "-v",
    "-ra",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration (deselect with '-m \"not integration\"')",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
]

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "tests/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
skip_gitignore = true
skip_glob = ["*.pyi"]

[tool.codespell]
skip = [
    "*.pyc",
    "*.css",
    "*.js",
    "*.map",
    "*.egg",
    "*.egg-info",
    "*.whl",
    ".git",
    ".tox",
    ".venv",
    "build",
    "dist",
    "node_modules",
]
ignore-words-list = """
    crate,inprogress,param,mod,iter,setup,endpoint,
    config,userdata,init,env,regex,subdir,scrypt,
    teardown,classname,backend,frontend,devops,async,prod
"""